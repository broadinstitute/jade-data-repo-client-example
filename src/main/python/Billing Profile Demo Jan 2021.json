{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Billing Profile Demo - Steward Role"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configuration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime, getpass, uuid\n",
    "from data_repo_client import RepositoryApi\n",
    "from data_repo_client import ResourcesApi\n",
    "from data_repo_client import ApiClient\n",
    "from data_repo_client import Configuration\n",
    "from data_repo_client import UnauthenticatedApi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authenicate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Retrieve your access token by running these commands in your terminal\n",
    "\n",
    "  1. Login in with desired user\n",
    "\n",
    "`gcloud auth login`\n",
    "\n",
    "  2. Print the token to use in the next step\n",
    "\n",
    "`gcloud auth print-access-token`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Paste token data········\n"
     ]
    }
   ],
   "source": [
    "# Set up configuration\n",
    "config = Configuration()\n",
    "config.host=\"https://jade-sh.datarepo-dev.broadinstitute.org/\"\n",
    "\n",
    "# Use access token printed in last step\n",
    "config.access_token= getpass.getpass(\"Paste token data \")\n",
    "apiClient = ApiClient(configuration=config)\n",
    "apiClient.client_side_validation = False\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'active_profiles': ['google', 'cloudsql', 'dev', 'sh'],\n",
      " 'client_id': '970791974390-1581mjhtp2b3jmg4avhor1vabs13b7ur.apps.googleusercontent.com',\n",
      " 'git_hash': '1c49b84b',\n",
      " 'sem_ver': '1.0.192-SNAPSHOT'}\n"
     ]
    }
   ],
   "source": [
    "# Example Unauthenicated command\n",
    "unauthenticated = UnauthenticatedApi(api_client=apiClient)\n",
    "print(unauthenticated.retrieve_repository_config())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'items': [], 'total': 0}\n"
     ]
    }
   ],
   "source": [
    "# List Datasets\n",
    "repoApi = RepositoryApi(api_client=apiClient)\n",
    "print(repoApi.enumerate_datasets())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'items': [], 'total': 0}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List Billing Profiles\n",
    "resourceApi = ResourcesApi(api_client=apiClient)\n",
    "resourceApi.enumerate_profiles()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Billing Profile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define paramters  & format request"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Billing Profile Id: 87e57797-eb1b-4761-b253-3a60d61bbcf0\n",
      "Profile Name: test-87e57797-2021-01-07\n",
      "Profile Description: test for 87e57797 on 2021-01-07\n"
     ]
    }
   ],
   "source": [
    "billingProfileId = str(uuid.uuid4())\n",
    "print(\"Billing Profile Id: \" + billingProfileId)\n",
    "billingAccountId = \"00708C-45D19D-27AAFA\"\n",
    "\n",
    "strHashId = billingProfileId[0:8]\n",
    "strToday = str(datetime.date.today())\n",
    "description = \"test for \" + strHashId + \" on \" + strToday\n",
    "profileName = \"test-\" + strHashId + \"-\" + strToday\n",
    "\n",
    "print(\"Profile Name: \" + profileName + \"\\nProfile Description: \" + description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'biller': 'direct', 'billingAccountId': '00708C-45D19D-27AAFA', 'description': 'test for 87e57797 on 2021-01-07', 'id': '87e57797-eb1b-4761-b253-3a60d61bbcf0', 'profileName': 'test-87e57797-2021-01-07'}\n"
     ]
    }
   ],
   "source": [
    "# B) Format the request - must be json w/ single quotes\n",
    "profileRequest = {\n",
    "    \"biller\": \"direct\",\n",
    "    \"billingAccountId\": billingAccountId,\n",
    "    \"description\": description,\n",
    "    \"id\": billingProfileId,\n",
    "    \"profileName\": profileName\n",
    "}\n",
    "print(profileRequest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make async request to create new profile and check job status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "code_folding": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': None,\n",
       " 'description': \"Create billing profile 'test-87e57797-2021-01-07'\",\n",
       " 'id': 'EdI7kb1DT8u0HuHup4_mNQ',\n",
       " 'job_status': 'running',\n",
       " 'status_code': 202,\n",
       " 'submitted': '2021-01-07T14:34:48.735503Z'}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "createProfileThread = resourceApi.create_profile(async_req=True, billing_profile_request=profileRequest)\n",
    "createProfileJobId = createProfileThread.get().id\n",
    "repoApi.retrieve_job(createProfileJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': '2021-01-07T14:34:49.714628Z',\n",
       " 'description': \"Create billing profile 'test-87e57797-2021-01-07'\",\n",
       " 'id': 'EdI7kb1DT8u0HuHup4_mNQ',\n",
       " 'job_status': 'succeeded',\n",
       " 'status_code': 201,\n",
       " 'submitted': '2021-01-07T14:34:48.735503Z'}"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Wait until status = succeeded\n",
    "repoApi.retrieve_job(createProfileJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'items': [{'biller': 'direct',\n",
       "            'billing_account_id': '00708C-45D19D-27AAFA',\n",
       "            'created_by': 'sholdendev@gmail.com',\n",
       "            'created_date': '2021-01-07T14:34:48.817329Z',\n",
       "            'description': 'test for 87e57797 on 2021-01-07',\n",
       "            'id': '87e57797-eb1b-4761-b253-3a60d61bbcf0',\n",
       "            'profile_name': 'test-87e57797-2021-01-07'}],\n",
       " 'total': 1}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#E) Check to see new profile added\n",
    "resourceApi.enumerate_profiles()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retrieve newly created profile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'biller': 'direct',\n",
       " 'billing_account_id': '00708C-45D19D-27AAFA',\n",
       " 'created_by': 'sholdendev@gmail.com',\n",
       " 'created_date': '2021-01-07T14:34:48.817329Z',\n",
       " 'description': 'test for 87e57797 on 2021-01-07',\n",
       " 'id': '87e57797-eb1b-4761-b253-3a60d61bbcf0',\n",
       " 'profile_name': 'test-87e57797-2021-01-07'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#retrieve new profile\n",
    "profileId = resourceApi.enumerate_profiles().items[0].id\n",
    "resourceApi.retrieve_profile(profileId)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use the new billing profile to create dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define paramters  & format request"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "code_folding": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'defaultProfileId': '87e57797-eb1b-4761-b253-3a60d61bbcf0', 'description': 'test for d92e8ed1 on 2021-01-07', 'name': 'testd92e8ed1', 'schema': {'tables': [{'name': 'participant', 'columns': [{'name': 'participantId', 'datatype': 'string'}, {'name': 'age', 'datatype': 'integer'}], 'primaryKey': ['participantId']}], 'relationships': [], 'assets': []}}\n"
     ]
    }
   ],
   "source": [
    "str_uuid = str(uuid.uuid4())\n",
    "strHashId = str_uuid[0:8]\n",
    "strToday = str(datetime.date.today())\n",
    "datasetDescription = \"test for \" + strHashId + \" on \" + strToday\n",
    "datasetName = \"datasetTest\" + strHashId\n",
    "\n",
    "datasetRequest = {\n",
    "  \"defaultProfileId\": profileId,\n",
    "  \"description\": datasetDescription,\n",
    "  \"name\": datasetName,\n",
    "  \"schema\": {\n",
    "    \"tables\": [\n",
    "      {\n",
    "        \"name\": \"participant\",\n",
    "        \"columns\": [\n",
    "          {\"name\": \"participantId\", \"datatype\": \"string\"},\n",
    "          {\"name\": \"age\", \"datatype\": \"integer\"}\n",
    "        ],\n",
    "        \"primaryKey\": [\"participantId\"]\n",
    "      }\n",
    "    ],\n",
    "    \"relationships\": [],\n",
    "    \"assets\": []\n",
    "  }\n",
    "}\n",
    "\n",
    "print(datasetRequest)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make async request to create new dataset and check job status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#async request to create dataset\n",
    "createDatasetThread = repoApi.create_dataset(async_req=True, dataset=datasetRequest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': None,\n",
       " 'description': 'Create dataset testd92e8ed1',\n",
       " 'id': 'HvFcp4oFTRKh2Z9qyIWQgA',\n",
       " 'job_status': 'running',\n",
       " 'status_code': 202,\n",
       " 'submitted': '2021-01-07T14:35:15.904697Z'}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# retrieve JobModel generated by create_dataset request\n",
    "createDatasetJobId = createDatasetThread.get().id\n",
    "# Check status of job\n",
    "repoApi.retrieve_job(createDatasetJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': '2021-01-07T14:35:31.245656Z',\n",
       " 'description': 'Create dataset testd92e8ed1',\n",
       " 'id': 'HvFcp4oFTRKh2Z9qyIWQgA',\n",
       " 'job_status': 'succeeded',\n",
       " 'status_code': 201,\n",
       " 'submitted': '2021-01-07T14:35:15.904697Z'}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# wait for job_status to equal succeeded\n",
    "repoApi.retrieve_job(createDatasetJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'items': [{'created_date': '2021-01-07T14:35:22.865871Z',\n",
       "            'default_profile_id': '87e57797-eb1b-4761-b253-3a60d61bbcf0',\n",
       "            'description': 'test for d92e8ed1 on 2021-01-07',\n",
       "            'id': 'b87e6862-1549-4adb-a444-c1c9036e06e9',\n",
       "            'name': 'testd92e8ed1'}],\n",
       " 'total': 1}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Once job_status = succeeded, check if dataset appears in recently created datasets\n",
    "repoApi.enumerate_datasets(sort=\"created_date\", direction=\"desc\", limit=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retrieve newly created dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'created_date': '2021-01-07T14:35:22.865871Z',\n",
       " 'data_project': 'broad-jade-sh-data',\n",
       " 'default_profile_id': '87e57797-eb1b-4761-b253-3a60d61bbcf0',\n",
       " 'default_snapshot_id': None,\n",
       " 'description': 'test for d92e8ed1 on 2021-01-07',\n",
       " 'id': 'b87e6862-1549-4adb-a444-c1c9036e06e9',\n",
       " 'name': 'testd92e8ed1',\n",
       " 'schema': {'assets': [],\n",
       "            'relationships': [],\n",
       "            'tables': [{'columns': [{'array_of': False,\n",
       "                                     'datatype': 'string',\n",
       "                                     'name': 'participantId'},\n",
       "                                    {'array_of': False,\n",
       "                                     'datatype': 'integer',\n",
       "                                     'name': 'age'}],\n",
       "                        'date_partition_options': None,\n",
       "                        'int_partition_options': None,\n",
       "                        'name': 'participant',\n",
       "                        'partition_mode': 'none',\n",
       "                        'primary_key': ['participantId'],\n",
       "                        'row_count': None}]}}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Retrieve Dataset\n",
    "datasetList = repoApi.enumerate_datasets(sort=\"created_date\", direction=\"desc\", limit=1)\n",
    "newDatasetId = datasetList.items[0].id\n",
    "repoApi.retrieve_dataset(newDatasetId)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Attempt to delete billing profile & show failure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ATTEMPT to delete the profile - this should fail since it in use by the newly created dataset\n",
    "deleteProfileThread = resourceApi.delete_profile(profileId, async_req=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': '2021-01-07T14:35:45.719890Z',\n",
       " 'description': 'Delete billing profile id '\n",
       "                \"'87e57797-eb1b-4761-b253-3a60d61bbcf0'\",\n",
       " 'id': 'kOaendhbTraxtcXWzveqMg',\n",
       " 'job_status': 'failed',\n",
       " 'status_code': 200,\n",
       " 'submitted': '2021-01-07T14:35:45.679145Z'}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deleteProfileJobId = deleteProfileThread.get().id\n",
    "repoApi.retrieve_job(deleteProfileJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'items': [{'biller': 'direct',\n",
       "            'billing_account_id': '00708C-45D19D-27AAFA',\n",
       "            'created_by': 'sholdendev@gmail.com',\n",
       "            'created_date': '2021-01-07T14:34:48.817329Z',\n",
       "            'description': 'test for 87e57797 on 2021-01-07',\n",
       "            'id': '87e57797-eb1b-4761-b253-3a60d61bbcf0',\n",
       "            'profile_name': 'test-87e57797-2021-01-07'}],\n",
       " 'total': 1}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Show that the profile was NOT deleted - it should still exist\n",
    "resourceApi.enumerate_profiles()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Share Billing Profile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retrieve the policy associated with the billing profile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "code_folding": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'policies': [{'members': ['sholdendev@gmail.com',\n",
       "                           'JadeStewards-dev@dev.test.firecloud.org'],\n",
       "               'name': 'owner'},\n",
       "              {'members': ['sholden@broadinstitute.org'], 'name': 'user'}]}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Retrieve profile policy\n",
    "resourceApi.retrieve_profile_policies(profileId)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make request to add member"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sfholden3@gmail.com\n"
     ]
    }
   ],
   "source": [
    "memberEmailToAdd=input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'policies': [{'members': ['sholden@broadinstitute.org', 'sfholden3@gmail.com'],\n",
       "               'name': 'user'}]}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "memberRequest = {'email': memberEmailToAdd}\n",
    "resourceApi.add_profile_policy_member(id=profileId, policy_name=\"user\", policy_member_request=memberRequest)\n",
    "                "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confirm user has been added to policy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'policies': [{'members': ['sholdendev@gmail.com',\n",
       "                           'JadeStewards-dev@dev.test.firecloud.org'],\n",
       "               'name': 'owner'},\n",
       "              {'members': ['sholden@broadinstitute.org', 'sfholden3@gmail.com'],\n",
       "               'name': 'user'}]}"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resourceApi.retrieve_profile_policies(profileId)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean up"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Delete Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': None,\n",
       " 'description': 'Delete dataset b87e6862-1549-4adb-a444-c1c9036e06e9',\n",
       " 'id': 'V17XRP-2SJucYMffmy0auQ',\n",
       " 'job_status': 'running',\n",
       " 'status_code': 202,\n",
       " 'submitted': '2021-01-07T15:04:36.204564Z'}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# delete dataset\n",
    "deleteDatasetThread = repoApi.delete_dataset(newDatasetId, async_req=True)\n",
    "deleteDatasetJobId = deleteDatasetThread.get().id\n",
    "repoApi.retrieve_job(deleteDatasetJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'items': [], 'total': 0}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#List out datasets again\n",
    "repoApi.enumerate_datasets(sort=\"created_date\", direction=\"desc\", limit=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Delete Profile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'completed': None,\n",
       " 'description': 'Delete billing profile id '\n",
       "                \"'87e57797-eb1b-4761-b253-3a60d61bbcf0'\",\n",
       " 'id': 'IAweikjgR0aBZVn60nQDgg',\n",
       " 'job_status': 'running',\n",
       " 'status_code': 202,\n",
       " 'submitted': '2021-01-07T15:04:41.910829Z'}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Delete the profile\n",
    "deleteProfileThread = resourceApi.delete_profile(profileId, async_req=True)\n",
    "deleteProfileJobId = deleteProfileThread.get().id\n",
    "repoApi.retrieve_job(deleteProfileJobId)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'items': [], 'total': 0}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check that profile has been deleted\n",
    "resourceApi.enumerate_profiles()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
